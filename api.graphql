### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type BatchPayload {
  count: Int!
}

type Company {
  city: String
  Events(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int): [Event!]!
  id: Int!
  name: String!
  Producers(after: ProducerWhereUniqueInput, before: ProducerWhereUniqueInput, first: Int, last: Int): [Producer!]!
  Productions(after: ProductionWhereUniqueInput, before: ProductionWhereUniqueInput, first: Int, last: Int): [Production!]!
  state: String
  Venues(after: VenueWhereUniqueInput, before: VenueWhereUniqueInput, first: Int, last: Int): [Venue!]!
}

input CompanyCreateInput {
  city: String
  Events: EventCreateManyWithoutCompanyInput
  name: String!
  Producers: ProducerCreateManyWithoutCompanyInput
  Productions: ProductionCreateManyWithoutCompanyInput
  state: String
  User: UserCreateManyWithoutCompanyInput
  Venues: VenueCreateManyWithoutCompaniesInput
}

input CompanyCreateManyWithoutVenuesInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutVenuesInput!]
}

input CompanyCreateOneWithoutEventsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutEventsInput
}

input CompanyCreateOneWithoutProducersInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutProducersInput
}

input CompanyCreateOneWithoutProductionsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutProductionsInput
}

input CompanyCreateOneWithoutUserInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutUserInput
}

input CompanyCreateWithoutEventsInput {
  city: String
  name: String!
  Producers: ProducerCreateManyWithoutCompanyInput
  Productions: ProductionCreateManyWithoutCompanyInput
  state: String
  User: UserCreateManyWithoutCompanyInput
  Venues: VenueCreateManyWithoutCompaniesInput
}

input CompanyCreateWithoutProducersInput {
  city: String
  Events: EventCreateManyWithoutCompanyInput
  name: String!
  Productions: ProductionCreateManyWithoutCompanyInput
  state: String
  User: UserCreateManyWithoutCompanyInput
  Venues: VenueCreateManyWithoutCompaniesInput
}

input CompanyCreateWithoutProductionsInput {
  city: String
  Events: EventCreateManyWithoutCompanyInput
  name: String!
  Producers: ProducerCreateManyWithoutCompanyInput
  state: String
  User: UserCreateManyWithoutCompanyInput
  Venues: VenueCreateManyWithoutCompaniesInput
}

input CompanyCreateWithoutUserInput {
  city: String
  Events: EventCreateManyWithoutCompanyInput
  name: String!
  Producers: ProducerCreateManyWithoutCompanyInput
  Productions: ProductionCreateManyWithoutCompanyInput
  state: String
  Venues: VenueCreateManyWithoutCompaniesInput
}

input CompanyCreateWithoutVenuesInput {
  city: String
  Events: EventCreateManyWithoutCompanyInput
  name: String!
  Producers: ProducerCreateManyWithoutCompanyInput
  Productions: ProductionCreateManyWithoutCompanyInput
  state: String
  User: UserCreateManyWithoutCompanyInput
}

input CompanyFilter {
  every: CompanyWhereInput
  none: CompanyWhereInput
  some: CompanyWhereInput
}

input CompanyOrderByInput {
  city: OrderByArg
  id: OrderByArg
  name: OrderByArg
  state: OrderByArg
}

input CompanyScalarWhereInput {
  AND: [CompanyScalarWhereInput!]
  city: NullableStringFilter
  Events: EventFilter
  id: IntFilter
  name: StringFilter
  NOT: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  Producers: ProducerFilter
  Productions: ProductionFilter
  state: NullableStringFilter
  User: UserFilter
  Venues: VenueFilter
}

input CompanyUpdateInput {
  city: String
  Events: EventUpdateManyWithoutCompanyInput
  id: Int
  name: String
  Producers: ProducerUpdateManyWithoutCompanyInput
  Productions: ProductionUpdateManyWithoutCompanyInput
  state: String
  User: UserUpdateManyWithoutCompanyInput
  Venues: VenueUpdateManyWithoutCompaniesInput
}

input CompanyUpdateManyDataInput {
  city: String
  id: Int
  name: String
  state: String
}

input CompanyUpdateManyMutationInput {
  city: String
  id: Int
  name: String
  state: String
}

input CompanyUpdateManyWithoutVenuesInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutVenuesInput!]
  delete: [CompanyWhereUniqueInput!]
  deleteMany: [CompanyScalarWhereInput!]
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutVenuesInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutVenuesInput!]
}

input CompanyUpdateManyWithWhereNestedInput {
  data: CompanyUpdateManyDataInput!
  where: CompanyScalarWhereInput!
}

input CompanyUpdateOneRequiredWithoutEventsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutEventsInput
  update: CompanyUpdateWithoutEventsDataInput
  upsert: CompanyUpsertWithoutEventsInput
}

input CompanyUpdateOneRequiredWithoutProducersInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutProducersInput
  update: CompanyUpdateWithoutProducersDataInput
  upsert: CompanyUpsertWithoutProducersInput
}

input CompanyUpdateOneRequiredWithoutProductionsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutProductionsInput
  update: CompanyUpdateWithoutProductionsDataInput
  upsert: CompanyUpsertWithoutProductionsInput
}

input CompanyUpdateOneRequiredWithoutUserInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutUserInput
  update: CompanyUpdateWithoutUserDataInput
  upsert: CompanyUpsertWithoutUserInput
}

input CompanyUpdateWithoutEventsDataInput {
  city: String
  id: Int
  name: String
  Producers: ProducerUpdateManyWithoutCompanyInput
  Productions: ProductionUpdateManyWithoutCompanyInput
  state: String
  User: UserUpdateManyWithoutCompanyInput
  Venues: VenueUpdateManyWithoutCompaniesInput
}

input CompanyUpdateWithoutProducersDataInput {
  city: String
  Events: EventUpdateManyWithoutCompanyInput
  id: Int
  name: String
  Productions: ProductionUpdateManyWithoutCompanyInput
  state: String
  User: UserUpdateManyWithoutCompanyInput
  Venues: VenueUpdateManyWithoutCompaniesInput
}

input CompanyUpdateWithoutProductionsDataInput {
  city: String
  Events: EventUpdateManyWithoutCompanyInput
  id: Int
  name: String
  Producers: ProducerUpdateManyWithoutCompanyInput
  state: String
  User: UserUpdateManyWithoutCompanyInput
  Venues: VenueUpdateManyWithoutCompaniesInput
}

input CompanyUpdateWithoutUserDataInput {
  city: String
  Events: EventUpdateManyWithoutCompanyInput
  id: Int
  name: String
  Producers: ProducerUpdateManyWithoutCompanyInput
  Productions: ProductionUpdateManyWithoutCompanyInput
  state: String
  Venues: VenueUpdateManyWithoutCompaniesInput
}

input CompanyUpdateWithoutVenuesDataInput {
  city: String
  Events: EventUpdateManyWithoutCompanyInput
  id: Int
  name: String
  Producers: ProducerUpdateManyWithoutCompanyInput
  Productions: ProductionUpdateManyWithoutCompanyInput
  state: String
  User: UserUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithWhereUniqueWithoutVenuesInput {
  data: CompanyUpdateWithoutVenuesDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpsertWithoutEventsInput {
  create: CompanyCreateWithoutEventsInput!
  update: CompanyUpdateWithoutEventsDataInput!
}

input CompanyUpsertWithoutProducersInput {
  create: CompanyCreateWithoutProducersInput!
  update: CompanyUpdateWithoutProducersDataInput!
}

input CompanyUpsertWithoutProductionsInput {
  create: CompanyCreateWithoutProductionsInput!
  update: CompanyUpdateWithoutProductionsDataInput!
}

input CompanyUpsertWithoutUserInput {
  create: CompanyCreateWithoutUserInput!
  update: CompanyUpdateWithoutUserDataInput!
}

input CompanyUpsertWithWhereUniqueWithoutVenuesInput {
  create: CompanyCreateWithoutVenuesInput!
  update: CompanyUpdateWithoutVenuesDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  city: NullableStringFilter
  Events: EventFilter
  id: IntFilter
  name: StringFilter
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  Producers: ProducerFilter
  Productions: ProductionFilter
  state: NullableStringFilter
  User: UserFilter
  Venues: VenueFilter
}

input CompanyWhereUniqueInput {
  id: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Event {
  Company: Company!
  companyId: Int!
  dateTime: DateTime!
  id: Int!
  maxAdmission: Int
  name: String
  Production: Production!
  productionId: Int!
  Seats(after: SeatWhereUniqueInput, before: SeatWhereUniqueInput, first: Int, last: Int): [Seat!]!
  Venue: Venue!
  venueId: Int!
}

input EventCreateInput {
  Company: CompanyCreateOneWithoutEventsInput!
  dateTime: DateTime!
  maxAdmission: Int
  name: String
  Production: ProductionCreateOneWithoutEventsInput!
  Seats: SeatCreateManyWithoutEventInput
  Venue: VenueCreateOneWithoutEventsInput!
}

input EventCreateManyWithoutCompanyInput {
  connect: [EventWhereUniqueInput!]
  create: [EventCreateWithoutCompanyInput!]
}

input EventCreateManyWithoutProductionInput {
  connect: [EventWhereUniqueInput!]
  create: [EventCreateWithoutProductionInput!]
}

input EventCreateManyWithoutVenueInput {
  connect: [EventWhereUniqueInput!]
  create: [EventCreateWithoutVenueInput!]
}

input EventCreateOneWithoutSeatsInput {
  connect: EventWhereUniqueInput
  create: EventCreateWithoutSeatsInput
}

input EventCreateWithoutCompanyInput {
  dateTime: DateTime!
  maxAdmission: Int
  name: String
  Production: ProductionCreateOneWithoutEventsInput!
  Seats: SeatCreateManyWithoutEventInput
  Venue: VenueCreateOneWithoutEventsInput!
}

input EventCreateWithoutProductionInput {
  Company: CompanyCreateOneWithoutEventsInput!
  dateTime: DateTime!
  maxAdmission: Int
  name: String
  Seats: SeatCreateManyWithoutEventInput
  Venue: VenueCreateOneWithoutEventsInput!
}

input EventCreateWithoutSeatsInput {
  Company: CompanyCreateOneWithoutEventsInput!
  dateTime: DateTime!
  maxAdmission: Int
  name: String
  Production: ProductionCreateOneWithoutEventsInput!
  Venue: VenueCreateOneWithoutEventsInput!
}

input EventCreateWithoutVenueInput {
  Company: CompanyCreateOneWithoutEventsInput!
  dateTime: DateTime!
  maxAdmission: Int
  name: String
  Production: ProductionCreateOneWithoutEventsInput!
  Seats: SeatCreateManyWithoutEventInput
}

input EventFilter {
  every: EventWhereInput
  none: EventWhereInput
  some: EventWhereInput
}

input EventOrderByInput {
  companyId: OrderByArg
  dateTime: OrderByArg
  id: OrderByArg
  maxAdmission: OrderByArg
  name: OrderByArg
  productionId: OrderByArg
  venueId: OrderByArg
}

input EventScalarWhereInput {
  AND: [EventScalarWhereInput!]
  companyId: IntFilter
  dateTime: DateTimeFilter
  id: IntFilter
  maxAdmission: NullableIntFilter
  name: NullableStringFilter
  NOT: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  productionId: IntFilter
  Seats: SeatFilter
  venueId: IntFilter
}

input EventUpdateInput {
  Company: CompanyUpdateOneRequiredWithoutEventsInput
  dateTime: DateTime
  id: Int
  maxAdmission: Int
  name: String
  Production: ProductionUpdateOneRequiredWithoutEventsInput
  Seats: SeatUpdateManyWithoutEventInput
  Venue: VenueUpdateOneRequiredWithoutEventsInput
}

input EventUpdateManyDataInput {
  dateTime: DateTime
  id: Int
  maxAdmission: Int
  name: String
}

input EventUpdateManyMutationInput {
  dateTime: DateTime
  id: Int
  maxAdmission: Int
  name: String
}

input EventUpdateManyWithoutCompanyInput {
  connect: [EventWhereUniqueInput!]
  create: [EventCreateWithoutCompanyInput!]
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutCompanyInput!]
}

input EventUpdateManyWithoutProductionInput {
  connect: [EventWhereUniqueInput!]
  create: [EventCreateWithoutProductionInput!]
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutProductionInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutProductionInput!]
}

input EventUpdateManyWithoutVenueInput {
  connect: [EventWhereUniqueInput!]
  create: [EventCreateWithoutVenueInput!]
  delete: [EventWhereUniqueInput!]
  deleteMany: [EventScalarWhereInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutVenueInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutVenueInput!]
}

input EventUpdateManyWithWhereNestedInput {
  data: EventUpdateManyDataInput!
  where: EventScalarWhereInput!
}

input EventUpdateOneWithoutSeatsInput {
  connect: EventWhereUniqueInput
  create: EventCreateWithoutSeatsInput
  delete: Boolean
  disconnect: Boolean
  update: EventUpdateWithoutSeatsDataInput
  upsert: EventUpsertWithoutSeatsInput
}

input EventUpdateWithoutCompanyDataInput {
  dateTime: DateTime
  id: Int
  maxAdmission: Int
  name: String
  Production: ProductionUpdateOneRequiredWithoutEventsInput
  Seats: SeatUpdateManyWithoutEventInput
  Venue: VenueUpdateOneRequiredWithoutEventsInput
}

input EventUpdateWithoutProductionDataInput {
  Company: CompanyUpdateOneRequiredWithoutEventsInput
  dateTime: DateTime
  id: Int
  maxAdmission: Int
  name: String
  Seats: SeatUpdateManyWithoutEventInput
  Venue: VenueUpdateOneRequiredWithoutEventsInput
}

input EventUpdateWithoutSeatsDataInput {
  Company: CompanyUpdateOneRequiredWithoutEventsInput
  dateTime: DateTime
  id: Int
  maxAdmission: Int
  name: String
  Production: ProductionUpdateOneRequiredWithoutEventsInput
  Venue: VenueUpdateOneRequiredWithoutEventsInput
}

input EventUpdateWithoutVenueDataInput {
  Company: CompanyUpdateOneRequiredWithoutEventsInput
  dateTime: DateTime
  id: Int
  maxAdmission: Int
  name: String
  Production: ProductionUpdateOneRequiredWithoutEventsInput
  Seats: SeatUpdateManyWithoutEventInput
}

input EventUpdateWithWhereUniqueWithoutCompanyInput {
  data: EventUpdateWithoutCompanyDataInput!
  where: EventWhereUniqueInput!
}

input EventUpdateWithWhereUniqueWithoutProductionInput {
  data: EventUpdateWithoutProductionDataInput!
  where: EventWhereUniqueInput!
}

input EventUpdateWithWhereUniqueWithoutVenueInput {
  data: EventUpdateWithoutVenueDataInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithoutSeatsInput {
  create: EventCreateWithoutSeatsInput!
  update: EventUpdateWithoutSeatsDataInput!
}

input EventUpsertWithWhereUniqueWithoutCompanyInput {
  create: EventCreateWithoutCompanyInput!
  update: EventUpdateWithoutCompanyDataInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithWhereUniqueWithoutProductionInput {
  create: EventCreateWithoutProductionInput!
  update: EventUpdateWithoutProductionDataInput!
  where: EventWhereUniqueInput!
}

input EventUpsertWithWhereUniqueWithoutVenueInput {
  create: EventCreateWithoutVenueInput!
  update: EventUpdateWithoutVenueDataInput!
  where: EventWhereUniqueInput!
}

input EventWhereInput {
  AND: [EventWhereInput!]
  Company: CompanyWhereInput
  companyId: IntFilter
  dateTime: DateTimeFilter
  id: IntFilter
  maxAdmission: NullableIntFilter
  name: NullableStringFilter
  NOT: [EventWhereInput!]
  OR: [EventWhereInput!]
  Production: ProductionWhereInput
  productionId: IntFilter
  Seats: SeatFilter
  Venue: VenueWhereInput
  venueId: IntFilter
}

input EventWhereUniqueInput {
  companyId: Int
  id: Int
  productionId: Int
  venueId: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneCompany(data: CompanyCreateInput!): Company!
  createOneEvent(data: EventCreateInput!): Event!
  createOneProducer(data: ProducerCreateInput!): Producer!
  createOneProduction(data: ProductionCreateInput!): Production!
  createOneSeat(data: SeatCreateInput!): Seat!
  createOneSeatingChart(data: SeatingChartCreateInput!): SeatingChart!
  createOneUser(data: UserCreateInput!): User!
  createOneVenue(data: VenueCreateInput!): Venue!
  deleteManyCompany(where: CompanyWhereInput): BatchPayload!
  deleteManyEvent(where: EventWhereInput): BatchPayload!
  deleteManyProducer(where: ProducerWhereInput): BatchPayload!
  deleteManyProduction(where: ProductionWhereInput): BatchPayload!
  deleteManySeat(where: SeatWhereInput): BatchPayload!
  deleteManySeatingChart(where: SeatingChartWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteManyVenue(where: VenueWhereInput): BatchPayload!
  deleteOneCompany(where: CompanyWhereUniqueInput!): Company
  deleteOneEvent(where: EventWhereUniqueInput!): Event
  deleteOneProducer(where: ProducerWhereUniqueInput!): Producer
  deleteOneProduction(where: ProductionWhereUniqueInput!): Production
  deleteOneSeat(where: SeatWhereUniqueInput!): Seat
  deleteOneSeatingChart(where: SeatingChartWhereUniqueInput!): SeatingChart
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneVenue(where: VenueWhereUniqueInput!): Venue
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, name: String, password: String!): AuthPayload
  updateManyCompany(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  updateManyEvent(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  updateManyProducer(data: ProducerUpdateManyMutationInput!, where: ProducerWhereInput): BatchPayload!
  updateManyProduction(data: ProductionUpdateManyMutationInput!, where: ProductionWhereInput): BatchPayload!
  updateManySeat(data: SeatUpdateManyMutationInput!, where: SeatWhereInput): BatchPayload!
  updateManySeatingChart(data: SeatingChartUpdateManyMutationInput!, where: SeatingChartWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyVenue(data: VenueUpdateManyMutationInput!, where: VenueWhereInput): BatchPayload!
  updateOneCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateOneEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateOneProducer(data: ProducerUpdateInput!, where: ProducerWhereUniqueInput!): Producer
  updateOneProduction(data: ProductionUpdateInput!, where: ProductionWhereUniqueInput!): Production
  updateOneSeat(data: SeatUpdateInput!, where: SeatWhereUniqueInput!): Seat
  updateOneSeatingChart(data: SeatingChartUpdateInput!, where: SeatingChartWhereUniqueInput!): SeatingChart
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneVenue(data: VenueUpdateInput!, where: VenueWhereUniqueInput!): Venue
  upsertOneCompany(create: CompanyCreateInput!, update: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company!
  upsertOneEvent(create: EventCreateInput!, update: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  upsertOneProducer(create: ProducerCreateInput!, update: ProducerUpdateInput!, where: ProducerWhereUniqueInput!): Producer!
  upsertOneProduction(create: ProductionCreateInput!, update: ProductionUpdateInput!, where: ProductionWhereUniqueInput!): Production!
  upsertOneSeat(create: SeatCreateInput!, update: SeatUpdateInput!, where: SeatWhereUniqueInput!): Seat!
  upsertOneSeatingChart(create: SeatingChartCreateInput!, update: SeatingChartUpdateInput!, where: SeatingChartWhereUniqueInput!): SeatingChart!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneVenue(create: VenueCreateInput!, update: VenueUpdateInput!, where: VenueWhereUniqueInput!): Venue!
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Producer {
  Company: Company!
  companyId: Int!
  id: Int!
  name: String!
  Productions(after: ProductionWhereUniqueInput, before: ProductionWhereUniqueInput, first: Int, last: Int): [Production!]!
}

input ProducerCreateInput {
  Company: CompanyCreateOneWithoutProducersInput!
  name: String!
  Productions: ProductionCreateManyWithoutProducerInput
}

input ProducerCreateManyWithoutCompanyInput {
  connect: [ProducerWhereUniqueInput!]
  create: [ProducerCreateWithoutCompanyInput!]
}

input ProducerCreateOneWithoutProductionsInput {
  connect: ProducerWhereUniqueInput
  create: ProducerCreateWithoutProductionsInput
}

input ProducerCreateWithoutCompanyInput {
  name: String!
  Productions: ProductionCreateManyWithoutProducerInput
}

input ProducerCreateWithoutProductionsInput {
  Company: CompanyCreateOneWithoutProducersInput!
  name: String!
}

input ProducerFilter {
  every: ProducerWhereInput
  none: ProducerWhereInput
  some: ProducerWhereInput
}

input ProducerOrderByInput {
  companyId: OrderByArg
  id: OrderByArg
  name: OrderByArg
}

input ProducerScalarWhereInput {
  AND: [ProducerScalarWhereInput!]
  companyId: IntFilter
  id: IntFilter
  name: StringFilter
  NOT: [ProducerScalarWhereInput!]
  OR: [ProducerScalarWhereInput!]
  Productions: ProductionFilter
}

input ProducerUpdateInput {
  Company: CompanyUpdateOneRequiredWithoutProducersInput
  id: Int
  name: String
  Productions: ProductionUpdateManyWithoutProducerInput
}

input ProducerUpdateManyDataInput {
  id: Int
  name: String
}

input ProducerUpdateManyMutationInput {
  id: Int
  name: String
}

input ProducerUpdateManyWithoutCompanyInput {
  connect: [ProducerWhereUniqueInput!]
  create: [ProducerCreateWithoutCompanyInput!]
  delete: [ProducerWhereUniqueInput!]
  deleteMany: [ProducerScalarWhereInput!]
  disconnect: [ProducerWhereUniqueInput!]
  set: [ProducerWhereUniqueInput!]
  update: [ProducerUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [ProducerUpdateManyWithWhereNestedInput!]
  upsert: [ProducerUpsertWithWhereUniqueWithoutCompanyInput!]
}

input ProducerUpdateManyWithWhereNestedInput {
  data: ProducerUpdateManyDataInput!
  where: ProducerScalarWhereInput!
}

input ProducerUpdateOneRequiredWithoutProductionsInput {
  connect: ProducerWhereUniqueInput
  create: ProducerCreateWithoutProductionsInput
  update: ProducerUpdateWithoutProductionsDataInput
  upsert: ProducerUpsertWithoutProductionsInput
}

input ProducerUpdateWithoutCompanyDataInput {
  id: Int
  name: String
  Productions: ProductionUpdateManyWithoutProducerInput
}

input ProducerUpdateWithoutProductionsDataInput {
  Company: CompanyUpdateOneRequiredWithoutProducersInput
  id: Int
  name: String
}

input ProducerUpdateWithWhereUniqueWithoutCompanyInput {
  data: ProducerUpdateWithoutCompanyDataInput!
  where: ProducerWhereUniqueInput!
}

input ProducerUpsertWithoutProductionsInput {
  create: ProducerCreateWithoutProductionsInput!
  update: ProducerUpdateWithoutProductionsDataInput!
}

input ProducerUpsertWithWhereUniqueWithoutCompanyInput {
  create: ProducerCreateWithoutCompanyInput!
  update: ProducerUpdateWithoutCompanyDataInput!
  where: ProducerWhereUniqueInput!
}

input ProducerWhereInput {
  AND: [ProducerWhereInput!]
  Company: CompanyWhereInput
  companyId: IntFilter
  id: IntFilter
  name: StringFilter
  NOT: [ProducerWhereInput!]
  OR: [ProducerWhereInput!]
  Productions: ProductionFilter
}

input ProducerWhereUniqueInput {
  companyId: Int
  id: Int
}

type Production {
  Company: Company!
  companyId: Int!
  Events(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int): [Event!]!
  id: Int!
  name: String!
  Producer: Producer!
  producerId: Int!
}

input ProductionCreateInput {
  Company: CompanyCreateOneWithoutProductionsInput!
  Events: EventCreateManyWithoutProductionInput
  name: String!
  Producer: ProducerCreateOneWithoutProductionsInput!
}

input ProductionCreateManyWithoutCompanyInput {
  connect: [ProductionWhereUniqueInput!]
  create: [ProductionCreateWithoutCompanyInput!]
}

input ProductionCreateManyWithoutProducerInput {
  connect: [ProductionWhereUniqueInput!]
  create: [ProductionCreateWithoutProducerInput!]
}

input ProductionCreateOneWithoutEventsInput {
  connect: ProductionWhereUniqueInput
  create: ProductionCreateWithoutEventsInput
}

input ProductionCreateWithoutCompanyInput {
  Events: EventCreateManyWithoutProductionInput
  name: String!
  Producer: ProducerCreateOneWithoutProductionsInput!
}

input ProductionCreateWithoutEventsInput {
  Company: CompanyCreateOneWithoutProductionsInput!
  name: String!
  Producer: ProducerCreateOneWithoutProductionsInput!
}

input ProductionCreateWithoutProducerInput {
  Company: CompanyCreateOneWithoutProductionsInput!
  Events: EventCreateManyWithoutProductionInput
  name: String!
}

input ProductionFilter {
  every: ProductionWhereInput
  none: ProductionWhereInput
  some: ProductionWhereInput
}

input ProductionOrderByInput {
  companyId: OrderByArg
  id: OrderByArg
  name: OrderByArg
  producerId: OrderByArg
}

input ProductionScalarWhereInput {
  AND: [ProductionScalarWhereInput!]
  companyId: IntFilter
  Events: EventFilter
  id: IntFilter
  name: StringFilter
  NOT: [ProductionScalarWhereInput!]
  OR: [ProductionScalarWhereInput!]
  producerId: IntFilter
}

input ProductionUpdateInput {
  Company: CompanyUpdateOneRequiredWithoutProductionsInput
  Events: EventUpdateManyWithoutProductionInput
  id: Int
  name: String
  Producer: ProducerUpdateOneRequiredWithoutProductionsInput
}

input ProductionUpdateManyDataInput {
  id: Int
  name: String
}

input ProductionUpdateManyMutationInput {
  id: Int
  name: String
}

input ProductionUpdateManyWithoutCompanyInput {
  connect: [ProductionWhereUniqueInput!]
  create: [ProductionCreateWithoutCompanyInput!]
  delete: [ProductionWhereUniqueInput!]
  deleteMany: [ProductionScalarWhereInput!]
  disconnect: [ProductionWhereUniqueInput!]
  set: [ProductionWhereUniqueInput!]
  update: [ProductionUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [ProductionUpdateManyWithWhereNestedInput!]
  upsert: [ProductionUpsertWithWhereUniqueWithoutCompanyInput!]
}

input ProductionUpdateManyWithoutProducerInput {
  connect: [ProductionWhereUniqueInput!]
  create: [ProductionCreateWithoutProducerInput!]
  delete: [ProductionWhereUniqueInput!]
  deleteMany: [ProductionScalarWhereInput!]
  disconnect: [ProductionWhereUniqueInput!]
  set: [ProductionWhereUniqueInput!]
  update: [ProductionUpdateWithWhereUniqueWithoutProducerInput!]
  updateMany: [ProductionUpdateManyWithWhereNestedInput!]
  upsert: [ProductionUpsertWithWhereUniqueWithoutProducerInput!]
}

input ProductionUpdateManyWithWhereNestedInput {
  data: ProductionUpdateManyDataInput!
  where: ProductionScalarWhereInput!
}

input ProductionUpdateOneRequiredWithoutEventsInput {
  connect: ProductionWhereUniqueInput
  create: ProductionCreateWithoutEventsInput
  update: ProductionUpdateWithoutEventsDataInput
  upsert: ProductionUpsertWithoutEventsInput
}

input ProductionUpdateWithoutCompanyDataInput {
  Events: EventUpdateManyWithoutProductionInput
  id: Int
  name: String
  Producer: ProducerUpdateOneRequiredWithoutProductionsInput
}

input ProductionUpdateWithoutEventsDataInput {
  Company: CompanyUpdateOneRequiredWithoutProductionsInput
  id: Int
  name: String
  Producer: ProducerUpdateOneRequiredWithoutProductionsInput
}

input ProductionUpdateWithoutProducerDataInput {
  Company: CompanyUpdateOneRequiredWithoutProductionsInput
  Events: EventUpdateManyWithoutProductionInput
  id: Int
  name: String
}

input ProductionUpdateWithWhereUniqueWithoutCompanyInput {
  data: ProductionUpdateWithoutCompanyDataInput!
  where: ProductionWhereUniqueInput!
}

input ProductionUpdateWithWhereUniqueWithoutProducerInput {
  data: ProductionUpdateWithoutProducerDataInput!
  where: ProductionWhereUniqueInput!
}

input ProductionUpsertWithoutEventsInput {
  create: ProductionCreateWithoutEventsInput!
  update: ProductionUpdateWithoutEventsDataInput!
}

input ProductionUpsertWithWhereUniqueWithoutCompanyInput {
  create: ProductionCreateWithoutCompanyInput!
  update: ProductionUpdateWithoutCompanyDataInput!
  where: ProductionWhereUniqueInput!
}

input ProductionUpsertWithWhereUniqueWithoutProducerInput {
  create: ProductionCreateWithoutProducerInput!
  update: ProductionUpdateWithoutProducerDataInput!
  where: ProductionWhereUniqueInput!
}

input ProductionWhereInput {
  AND: [ProductionWhereInput!]
  Company: CompanyWhereInput
  companyId: IntFilter
  Events: EventFilter
  id: IntFilter
  name: StringFilter
  NOT: [ProductionWhereInput!]
  OR: [ProductionWhereInput!]
  Producer: ProducerWhereInput
  producerId: IntFilter
}

input ProductionWhereUniqueInput {
  companyId: Int
  id: Int
  producerId: Int
}

type Query {
  companies(after: CompanyWhereUniqueInput, before: CompanyWhereUniqueInput, first: Int, last: Int, orderBy: CompanyOrderByInput, where: CompanyWhereInput): [Company!]!
  companiesCount(where: CompanyWhereInput): Int
  company(where: CompanyWhereUniqueInput!): Company
  event(where: EventWhereUniqueInput!): Event
  events(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int, orderBy: EventOrderByInput, where: EventWhereInput): [Event!]!
  eventsCount(where: EventWhereInput): Int
  me: User
  producer(where: ProducerWhereUniqueInput!): Producer
  producers(after: ProducerWhereUniqueInput, before: ProducerWhereUniqueInput, first: Int, last: Int, orderBy: ProducerOrderByInput, where: ProducerWhereInput): [Producer!]!
  producersCount(where: ProducerWhereInput): Int
  production(where: ProductionWhereUniqueInput!): Production
  productions(after: ProductionWhereUniqueInput, before: ProductionWhereUniqueInput, first: Int, last: Int, orderBy: ProductionOrderByInput, where: ProductionWhereInput): [Production!]!
  productionsCount(where: ProductionWhereInput): Int
  seat(where: SeatWhereUniqueInput!): Seat
  seatingChart(where: SeatingChartWhereUniqueInput!): SeatingChart
  seatingCharts(after: SeatingChartWhereUniqueInput, before: SeatingChartWhereUniqueInput, first: Int, last: Int, orderBy: SeatingChartOrderByInput, where: SeatingChartWhereInput): [SeatingChart!]!
  seatingChartsCount(where: SeatingChartWhereInput): Int
  seats(after: SeatWhereUniqueInput, before: SeatWhereUniqueInput, first: Int, last: Int, orderBy: SeatOrderByInput, where: SeatWhereInput): [Seat!]!
  seatsCount(where: SeatWhereInput): Int
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: UserOrderByInput, where: UserWhereInput): [User!]!
  usersCount(where: UserWhereInput): Int
  venue(where: VenueWhereUniqueInput!): Venue
  venues(after: VenueWhereUniqueInput, before: VenueWhereUniqueInput, first: Int, last: Int, orderBy: VenueOrderByInput, where: VenueWhereInput): [Venue!]!
  venuesCount(where: VenueWhereInput): Int
}

enum RoleType {
  CompanyAdmin
  Customer
  SuperAdmin
}

type Seat {
  Event: Event
  eventId: Int
  id: Int!
  level: String
  number: String
  row: String
  section: String
  status: Int
}

input SeatCreateInput {
  Event: EventCreateOneWithoutSeatsInput
  level: String
  number: String
  row: String
  section: String
  status: Int
}

input SeatCreateManyWithoutEventInput {
  connect: [SeatWhereUniqueInput!]
  create: [SeatCreateWithoutEventInput!]
}

input SeatCreateWithoutEventInput {
  level: String
  number: String
  row: String
  section: String
  status: Int
}

input SeatFilter {
  every: SeatWhereInput
  none: SeatWhereInput
  some: SeatWhereInput
}

type SeatingChart {
  id: Int!
  name: String!
  Venue: Venue
  venueId: Int
}

input SeatingChartCreateInput {
  name: String!
  Venue: VenueCreateOneWithoutSeatingChartsInput
}

input SeatingChartCreateManyWithoutVenueInput {
  connect: [SeatingChartWhereUniqueInput!]
  create: [SeatingChartCreateWithoutVenueInput!]
}

input SeatingChartCreateWithoutVenueInput {
  name: String!
}

input SeatingChartFilter {
  every: SeatingChartWhereInput
  none: SeatingChartWhereInput
  some: SeatingChartWhereInput
}

input SeatingChartOrderByInput {
  id: OrderByArg
  name: OrderByArg
  venueId: OrderByArg
}

input SeatingChartScalarWhereInput {
  AND: [SeatingChartScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [SeatingChartScalarWhereInput!]
  OR: [SeatingChartScalarWhereInput!]
  venueId: NullableIntFilter
}

input SeatingChartUpdateInput {
  id: Int
  name: String
  Venue: VenueUpdateOneWithoutSeatingChartsInput
}

input SeatingChartUpdateManyDataInput {
  id: Int
  name: String
}

input SeatingChartUpdateManyMutationInput {
  id: Int
  name: String
}

input SeatingChartUpdateManyWithoutVenueInput {
  connect: [SeatingChartWhereUniqueInput!]
  create: [SeatingChartCreateWithoutVenueInput!]
  delete: [SeatingChartWhereUniqueInput!]
  deleteMany: [SeatingChartScalarWhereInput!]
  disconnect: [SeatingChartWhereUniqueInput!]
  set: [SeatingChartWhereUniqueInput!]
  update: [SeatingChartUpdateWithWhereUniqueWithoutVenueInput!]
  updateMany: [SeatingChartUpdateManyWithWhereNestedInput!]
  upsert: [SeatingChartUpsertWithWhereUniqueWithoutVenueInput!]
}

input SeatingChartUpdateManyWithWhereNestedInput {
  data: SeatingChartUpdateManyDataInput!
  where: SeatingChartScalarWhereInput!
}

input SeatingChartUpdateWithoutVenueDataInput {
  id: Int
  name: String
}

input SeatingChartUpdateWithWhereUniqueWithoutVenueInput {
  data: SeatingChartUpdateWithoutVenueDataInput!
  where: SeatingChartWhereUniqueInput!
}

input SeatingChartUpsertWithWhereUniqueWithoutVenueInput {
  create: SeatingChartCreateWithoutVenueInput!
  update: SeatingChartUpdateWithoutVenueDataInput!
  where: SeatingChartWhereUniqueInput!
}

input SeatingChartWhereInput {
  AND: [SeatingChartWhereInput!]
  id: IntFilter
  name: StringFilter
  NOT: [SeatingChartWhereInput!]
  OR: [SeatingChartWhereInput!]
  Venue: VenueWhereInput
  venueId: NullableIntFilter
}

input SeatingChartWhereUniqueInput {
  id: Int
  venueId: Int
}

input SeatOrderByInput {
  eventId: OrderByArg
  id: OrderByArg
  level: OrderByArg
  number: OrderByArg
  row: OrderByArg
  section: OrderByArg
  status: OrderByArg
}

input SeatScalarWhereInput {
  AND: [SeatScalarWhereInput!]
  eventId: NullableIntFilter
  id: IntFilter
  level: NullableStringFilter
  NOT: [SeatScalarWhereInput!]
  number: NullableStringFilter
  OR: [SeatScalarWhereInput!]
  row: NullableStringFilter
  section: NullableStringFilter
  status: NullableIntFilter
}

input SeatUpdateInput {
  Event: EventUpdateOneWithoutSeatsInput
  id: Int
  level: String
  number: String
  row: String
  section: String
  status: Int
}

input SeatUpdateManyDataInput {
  id: Int
  level: String
  number: String
  row: String
  section: String
  status: Int
}

input SeatUpdateManyMutationInput {
  id: Int
  level: String
  number: String
  row: String
  section: String
  status: Int
}

input SeatUpdateManyWithoutEventInput {
  connect: [SeatWhereUniqueInput!]
  create: [SeatCreateWithoutEventInput!]
  delete: [SeatWhereUniqueInput!]
  deleteMany: [SeatScalarWhereInput!]
  disconnect: [SeatWhereUniqueInput!]
  set: [SeatWhereUniqueInput!]
  update: [SeatUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [SeatUpdateManyWithWhereNestedInput!]
  upsert: [SeatUpsertWithWhereUniqueWithoutEventInput!]
}

input SeatUpdateManyWithWhereNestedInput {
  data: SeatUpdateManyDataInput!
  where: SeatScalarWhereInput!
}

input SeatUpdateWithoutEventDataInput {
  id: Int
  level: String
  number: String
  row: String
  section: String
  status: Int
}

input SeatUpdateWithWhereUniqueWithoutEventInput {
  data: SeatUpdateWithoutEventDataInput!
  where: SeatWhereUniqueInput!
}

input SeatUpsertWithWhereUniqueWithoutEventInput {
  create: SeatCreateWithoutEventInput!
  update: SeatUpdateWithoutEventDataInput!
  where: SeatWhereUniqueInput!
}

input SeatWhereInput {
  AND: [SeatWhereInput!]
  Event: EventWhereInput
  eventId: NullableIntFilter
  id: IntFilter
  level: NullableStringFilter
  NOT: [SeatWhereInput!]
  number: NullableStringFilter
  OR: [SeatWhereInput!]
  row: NullableStringFilter
  section: NullableStringFilter
  status: NullableIntFilter
}

input SeatWhereUniqueInput {
  eventId: Int
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  Company: Company!
  companyId: Int!
  email: String!
  id: Int!
  name: String
  password: String!
  roleType: RoleType!
}

input UserCreateInput {
  Company: CompanyCreateOneWithoutUserInput!
  email: String!
  name: String
  password: String!
  roleType: RoleType!
}

input UserCreateManyWithoutCompanyInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutCompanyInput!]
}

input UserCreateWithoutCompanyInput {
  email: String!
  name: String
  password: String!
  roleType: RoleType!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  companyId: OrderByArg
  email: OrderByArg
  id: OrderByArg
  name: OrderByArg
  password: OrderByArg
  roleType: OrderByArg
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  companyId: IntFilter
  email: StringFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: StringFilter
  roleType: RoleType
}

input UserUpdateInput {
  Company: CompanyUpdateOneRequiredWithoutUserInput
  email: String
  id: Int
  name: String
  password: String
  roleType: RoleType
}

input UserUpdateManyDataInput {
  email: String
  id: Int
  name: String
  password: String
  roleType: RoleType
}

input UserUpdateManyMutationInput {
  email: String
  id: Int
  name: String
  password: String
  roleType: RoleType
}

input UserUpdateManyWithoutCompanyInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutCompanyInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCompanyInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateWithoutCompanyDataInput {
  email: String
  id: Int
  name: String
  password: String
  roleType: RoleType
}

input UserUpdateWithWhereUniqueWithoutCompanyInput {
  data: UserUpdateWithoutCompanyDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutCompanyInput {
  create: UserCreateWithoutCompanyInput!
  update: UserUpdateWithoutCompanyDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  Company: CompanyWhereInput
  companyId: IntFilter
  email: StringFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  roleType: RoleType
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type Venue {
  Companies(after: CompanyWhereUniqueInput, before: CompanyWhereUniqueInput, first: Int, last: Int): [Company!]!
  Events(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int): [Event!]!
  id: Int!
  name: String!
  SeatingCharts(after: SeatingChartWhereUniqueInput, before: SeatingChartWhereUniqueInput, first: Int, last: Int): [SeatingChart!]!
}

input VenueCreateInput {
  Companies: CompanyCreateManyWithoutVenuesInput
  Events: EventCreateManyWithoutVenueInput
  name: String!
  SeatingCharts: SeatingChartCreateManyWithoutVenueInput
}

input VenueCreateManyWithoutCompaniesInput {
  connect: [VenueWhereUniqueInput!]
  create: [VenueCreateWithoutCompaniesInput!]
}

input VenueCreateOneWithoutEventsInput {
  connect: VenueWhereUniqueInput
  create: VenueCreateWithoutEventsInput
}

input VenueCreateOneWithoutSeatingChartsInput {
  connect: VenueWhereUniqueInput
  create: VenueCreateWithoutSeatingChartsInput
}

input VenueCreateWithoutCompaniesInput {
  Events: EventCreateManyWithoutVenueInput
  name: String!
  SeatingCharts: SeatingChartCreateManyWithoutVenueInput
}

input VenueCreateWithoutEventsInput {
  Companies: CompanyCreateManyWithoutVenuesInput
  name: String!
  SeatingCharts: SeatingChartCreateManyWithoutVenueInput
}

input VenueCreateWithoutSeatingChartsInput {
  Companies: CompanyCreateManyWithoutVenuesInput
  Events: EventCreateManyWithoutVenueInput
  name: String!
}

input VenueFilter {
  every: VenueWhereInput
  none: VenueWhereInput
  some: VenueWhereInput
}

input VenueOrderByInput {
  id: OrderByArg
  name: OrderByArg
}

input VenueScalarWhereInput {
  AND: [VenueScalarWhereInput!]
  Companies: CompanyFilter
  Events: EventFilter
  id: IntFilter
  name: StringFilter
  NOT: [VenueScalarWhereInput!]
  OR: [VenueScalarWhereInput!]
  SeatingCharts: SeatingChartFilter
}

input VenueUpdateInput {
  Companies: CompanyUpdateManyWithoutVenuesInput
  Events: EventUpdateManyWithoutVenueInput
  id: Int
  name: String
  SeatingCharts: SeatingChartUpdateManyWithoutVenueInput
}

input VenueUpdateManyDataInput {
  id: Int
  name: String
}

input VenueUpdateManyMutationInput {
  id: Int
  name: String
}

input VenueUpdateManyWithoutCompaniesInput {
  connect: [VenueWhereUniqueInput!]
  create: [VenueCreateWithoutCompaniesInput!]
  delete: [VenueWhereUniqueInput!]
  deleteMany: [VenueScalarWhereInput!]
  disconnect: [VenueWhereUniqueInput!]
  set: [VenueWhereUniqueInput!]
  update: [VenueUpdateWithWhereUniqueWithoutCompaniesInput!]
  updateMany: [VenueUpdateManyWithWhereNestedInput!]
  upsert: [VenueUpsertWithWhereUniqueWithoutCompaniesInput!]
}

input VenueUpdateManyWithWhereNestedInput {
  data: VenueUpdateManyDataInput!
  where: VenueScalarWhereInput!
}

input VenueUpdateOneRequiredWithoutEventsInput {
  connect: VenueWhereUniqueInput
  create: VenueCreateWithoutEventsInput
  update: VenueUpdateWithoutEventsDataInput
  upsert: VenueUpsertWithoutEventsInput
}

input VenueUpdateOneWithoutSeatingChartsInput {
  connect: VenueWhereUniqueInput
  create: VenueCreateWithoutSeatingChartsInput
  delete: Boolean
  disconnect: Boolean
  update: VenueUpdateWithoutSeatingChartsDataInput
  upsert: VenueUpsertWithoutSeatingChartsInput
}

input VenueUpdateWithoutCompaniesDataInput {
  Events: EventUpdateManyWithoutVenueInput
  id: Int
  name: String
  SeatingCharts: SeatingChartUpdateManyWithoutVenueInput
}

input VenueUpdateWithoutEventsDataInput {
  Companies: CompanyUpdateManyWithoutVenuesInput
  id: Int
  name: String
  SeatingCharts: SeatingChartUpdateManyWithoutVenueInput
}

input VenueUpdateWithoutSeatingChartsDataInput {
  Companies: CompanyUpdateManyWithoutVenuesInput
  Events: EventUpdateManyWithoutVenueInput
  id: Int
  name: String
}

input VenueUpdateWithWhereUniqueWithoutCompaniesInput {
  data: VenueUpdateWithoutCompaniesDataInput!
  where: VenueWhereUniqueInput!
}

input VenueUpsertWithoutEventsInput {
  create: VenueCreateWithoutEventsInput!
  update: VenueUpdateWithoutEventsDataInput!
}

input VenueUpsertWithoutSeatingChartsInput {
  create: VenueCreateWithoutSeatingChartsInput!
  update: VenueUpdateWithoutSeatingChartsDataInput!
}

input VenueUpsertWithWhereUniqueWithoutCompaniesInput {
  create: VenueCreateWithoutCompaniesInput!
  update: VenueUpdateWithoutCompaniesDataInput!
  where: VenueWhereUniqueInput!
}

input VenueWhereInput {
  AND: [VenueWhereInput!]
  Companies: CompanyFilter
  Events: EventFilter
  id: IntFilter
  name: StringFilter
  NOT: [VenueWhereInput!]
  OR: [VenueWhereInput!]
  SeatingCharts: SeatingChartFilter
}

input VenueWhereUniqueInput {
  id: Int
}
